Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> ExpI
Rule 2     ExpI -> ExpI ADD ExpS
Rule 3     ExpI -> ExpI SUB ExpS
Rule 4     ExpI -> ExpS
Rule 5     ExpS -> ExpS MUL Termo
Rule 6     ExpS -> ExpS DIV Termo
Rule 7     ExpS -> Termo
Rule 8     Termo -> NUM

Terminals, with rules where they appear

ADD                  : 2
DIV                  : 6
MUL                  : 5
NUM                  : 8
SUB                  : 3
error                : 

Nonterminals, with rules where they appear

ExpI                 : 1 2 3
ExpS                 : 2 3 4 5 6
S                    : 0
Termo                : 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . ExpI
    (2) ExpI -> . ExpI ADD ExpS
    (3) ExpI -> . ExpI SUB ExpS
    (4) ExpI -> . ExpS
    (5) ExpS -> . ExpS MUL Termo
    (6) ExpS -> . ExpS DIV Termo
    (7) ExpS -> . Termo
    (8) Termo -> . NUM

    NUM             shift and go to state 5

    S                              shift and go to state 1
    ExpI                           shift and go to state 2
    ExpS                           shift and go to state 3
    Termo                          shift and go to state 4

state 1

    (0) S' -> S .



state 2

    (1) S -> ExpI .
    (2) ExpI -> ExpI . ADD ExpS
    (3) ExpI -> ExpI . SUB ExpS

    $end            reduce using rule 1 (S -> ExpI .)
    ADD             shift and go to state 6
    SUB             shift and go to state 7


state 3

    (4) ExpI -> ExpS .
    (5) ExpS -> ExpS . MUL Termo
    (6) ExpS -> ExpS . DIV Termo

    ADD             reduce using rule 4 (ExpI -> ExpS .)
    SUB             reduce using rule 4 (ExpI -> ExpS .)
    $end            reduce using rule 4 (ExpI -> ExpS .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 4

    (7) ExpS -> Termo .

    MUL             reduce using rule 7 (ExpS -> Termo .)
    DIV             reduce using rule 7 (ExpS -> Termo .)
    ADD             reduce using rule 7 (ExpS -> Termo .)
    SUB             reduce using rule 7 (ExpS -> Termo .)
    $end            reduce using rule 7 (ExpS -> Termo .)


state 5

    (8) Termo -> NUM .

    MUL             reduce using rule 8 (Termo -> NUM .)
    DIV             reduce using rule 8 (Termo -> NUM .)
    ADD             reduce using rule 8 (Termo -> NUM .)
    SUB             reduce using rule 8 (Termo -> NUM .)
    $end            reduce using rule 8 (Termo -> NUM .)


state 6

    (2) ExpI -> ExpI ADD . ExpS
    (5) ExpS -> . ExpS MUL Termo
    (6) ExpS -> . ExpS DIV Termo
    (7) ExpS -> . Termo
    (8) Termo -> . NUM

    NUM             shift and go to state 5

    ExpS                           shift and go to state 10
    Termo                          shift and go to state 4

state 7

    (3) ExpI -> ExpI SUB . ExpS
    (5) ExpS -> . ExpS MUL Termo
    (6) ExpS -> . ExpS DIV Termo
    (7) ExpS -> . Termo
    (8) Termo -> . NUM

    NUM             shift and go to state 5

    ExpS                           shift and go to state 11
    Termo                          shift and go to state 4

state 8

    (5) ExpS -> ExpS MUL . Termo
    (8) Termo -> . NUM

    NUM             shift and go to state 5

    Termo                          shift and go to state 12

state 9

    (6) ExpS -> ExpS DIV . Termo
    (8) Termo -> . NUM

    NUM             shift and go to state 5

    Termo                          shift and go to state 13

state 10

    (2) ExpI -> ExpI ADD ExpS .
    (5) ExpS -> ExpS . MUL Termo
    (6) ExpS -> ExpS . DIV Termo

    ADD             reduce using rule 2 (ExpI -> ExpI ADD ExpS .)
    SUB             reduce using rule 2 (ExpI -> ExpI ADD ExpS .)
    $end            reduce using rule 2 (ExpI -> ExpI ADD ExpS .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 11

    (3) ExpI -> ExpI SUB ExpS .
    (5) ExpS -> ExpS . MUL Termo
    (6) ExpS -> ExpS . DIV Termo

    ADD             reduce using rule 3 (ExpI -> ExpI SUB ExpS .)
    SUB             reduce using rule 3 (ExpI -> ExpI SUB ExpS .)
    $end            reduce using rule 3 (ExpI -> ExpI SUB ExpS .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 12

    (5) ExpS -> ExpS MUL Termo .

    MUL             reduce using rule 5 (ExpS -> ExpS MUL Termo .)
    DIV             reduce using rule 5 (ExpS -> ExpS MUL Termo .)
    ADD             reduce using rule 5 (ExpS -> ExpS MUL Termo .)
    SUB             reduce using rule 5 (ExpS -> ExpS MUL Termo .)
    $end            reduce using rule 5 (ExpS -> ExpS MUL Termo .)


state 13

    (6) ExpS -> ExpS DIV Termo .

    MUL             reduce using rule 6 (ExpS -> ExpS DIV Termo .)
    DIV             reduce using rule 6 (ExpS -> ExpS DIV Termo .)
    ADD             reduce using rule 6 (ExpS -> ExpS DIV Termo .)
    SUB             reduce using rule 6 (ExpS -> ExpS DIV Termo .)
    $end            reduce using rule 6 (ExpS -> ExpS DIV Termo .)

